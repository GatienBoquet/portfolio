{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","taxin","taxout","tps","tvq","handleChange","bind","taxoutChange","e","target","value","this","console","log","total","parseFloat","setState","toFixed","className","src","logo","alt","htmlFor","type","id","name","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,8MCkE5BC,G,wDA5Db,WAAaC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,EACPC,OAAQ,EACRC,IAAK,IACLC,IAAK,QAEP,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,yDAWNE,GACX,IAAIL,EAAOK,EAAEC,OAAOC,MAASC,KAAKX,MAAMG,IACxCS,QAAQC,IAAI,SAAWV,GAEvB,IAAIC,EAAOI,EAAEC,OAAOC,MAASC,KAAKX,MAAMI,IACxCQ,QAAQC,IAAI,QAAUT,GACtB,IAAIU,EAASC,WAAWP,EAAEC,OAAOC,OAASK,WAAWZ,GAAOY,WAAWX,GACvEQ,QAAQC,IAAIE,WAAWZ,IACvBS,QAAQC,IAAIE,WAAWX,IACvBQ,QAAQC,IAAIC,GACZH,KAAKK,SAAS,CACZf,MAAOa,EAAMG,QAAQ,GACrBf,OAAQM,EAAEC,OAAOC,U,mCAIRF,GACX,IAAIL,EAAOK,EAAEC,OAAOC,MAASC,KAAKX,MAAMG,IACxCS,QAAQC,IAAI,cAAgBV,GAE5B,IAAIC,EAAOI,EAAEC,OAAOC,MAASC,KAAKX,MAAMI,IACxCQ,QAAQC,IAAI,aAAeT,GAC3B,IAAIU,EAASC,WAAWP,EAAEC,OAAOC,OAAS,QAC1CC,KAAKK,SAAS,CACZf,MAAOO,EAAEC,OAAOC,MAChBR,OAAQY,EAAMG,QAAQ,O,+BAKxB,OACE,oCACA,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BAAOC,QAAQ,UAAf,YACA,2BAAOC,KAAK,OAAOC,GAAG,SAASC,KAAK,SAASf,MAAOC,KAAKX,MAAME,OAAQwB,SAAUf,KAAKN,eACtF,2BAAOiB,QAAQ,SAAf,wBACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQC,KAAK,QAAQf,MAAOC,KAAKX,MAAMC,MAAOyB,SAAUf,KAAKJ,eACnF,gDACoB,iD,GArDZoB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.c60995c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a671f156.png\";","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor (props){\n    super(props);\n    this.state = {\n      taxin: 1,\n      taxout: 1,\n      tps: 0.05,\n      tvq: 0.09975\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.taxoutChange = this.taxoutChange.bind(this);\n  }\n  handleChange(e){\n    var tps = (e.target.value * (this.state.tps));\n    console.log(\"tps = \" + tps);\n\n    var tvq = (e.target.value * (this.state.tvq));\n    console.log(\"tvq =\" + tvq);\n    var total = (parseFloat(e.target.value) + parseFloat(tps) + parseFloat(tvq));\n    console.log(parseFloat(tps));\n    console.log(parseFloat(tvq));\n    console.log(total);\n    this.setState({\n      taxin: total.toFixed(2),\n      taxout: e.target.value\n    });\n  }\n\n  taxoutChange(e){\n    var tps = (e.target.value * (this.state.tps));\n    console.log(\"valeur tps \" + tps);\n\n    var tvq = (e.target.value * (this.state.tvq));\n    console.log(\"valeur tvq\" + tvq);\n    var total = (parseFloat(e.target.value) / 1.14975);\n    this.setState({\n      taxin: e.target.value,\n      taxout: total.toFixed(2)\n    });\n  }\n\n  render(){\n    return (\n      <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <label htmlFor=\"taxout\">Tax Out:</label>\n          <input type=\"text\" id=\"taxout\" name=\"taxout\" value={this.state.taxout} onChange={this.handleChange}></input>\n          <label htmlFor=\"taxin\">Tax In (TPS et TVQ):</label>\n          <input type=\"text\" id=\"taxin\" name=\"taxin\" value={this.state.taxin} onChange={this.taxoutChange}></input>\n          <p>\n            Easy Tax In / Out <code>Magique</code>\n          </p>\n        </header>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}